---
title: "service"
date: "05/12/2024"
categories: [ "System Services" ]
---
## Understanding Systemd and `systemctl`

`systemctl` provides a powerful and user-friendly way to control system services.  Instead of relying on older methods like `/etc/init.d` scripts, `systemctl` offers a consistent and efficient approach across various distributions.  Before diving into commands, let's understand the basic states a service can be in:

* **active (running):** The service is currently running.
* **inactive:** The service is not running.
* **failed:** The service failed to start or encountered an error.
* **masked:** The service is explicitly prevented from starting.


## Essential `systemctl` Commands with Examples

Let's look at some fundamental `systemctl` commands, illustrated with practical examples. We'll use the `network-manager` service for demonstration purposes, but these commands apply to most services.


**1. Checking Service Status:**

The simplest command is `status`. This displays the service's current state, including active status, process ID (PID), and any logged messages.

```bash
sudo systemctl status network-manager
```

This will output detailed information about the NetworkManager service.  Look for lines indicating "active (running)" or similar to confirm its operational status.  Errors will be displayed prominently in the output.


**2. Starting and Stopping Services:**

To start a service:

```bash
sudo systemctl start network-manager
```

To stop a service:

```bash
sudo systemctl stop network-manager
```

Remember to use `sudo` as these commands require root privileges.  These commands are straightforward and immediately affect the service's state.


**3. Restarting and Reloading Services:**

Restarting a service stops and then restarts it:

```bash
sudo systemctl restart network-manager
```

Reloading a service typically applies configuration changes without restarting the entire process:

```bash
sudo systemctl reload network-manager
```

Reloading is useful when configuration files are updated and the service needs to reflect those changes.


**4. Enabling and Disabling Services:**

Enabling a service ensures it starts automatically at boot:

```bash
sudo systemctl enable network-manager
```

Disabling a service prevents it from starting automatically at boot:

```bash
sudo systemctl disable network-manager
```

These commands affect the service's startup configuration, not its immediate runtime state.


**5. Listing Services:**

To list all services:

```bash
systemctl list-unit-files
```

This command shows all services installed on the system, indicating their status (enabled, disabled, masked).  You can filter this list further, for example, showing only enabled services:

```bash
systemctl list-unit-files --type=service --state=enabled
```


**6.  Viewing Service Logs:**

Often essential for troubleshooting, you can examine the service's log using `journalctl`:

```bash
journalctl -u network-manager
```

This command displays the logs specifically related to the `network-manager` service, including error messages and other important information. You can refine this using options like `-n 10` (to show the last 10 lines) or `-xe` (to show only error messages).


**7. Masking a Service:**

Masking a service permanently prevents it from being started, even manually:

```bash
sudo systemctl mask network-manager
```

This is usually used for services that should never be run, such as outdated or conflicting services.  Unmasking can be done with `sudo systemctl unmask network-manager`.


These examples provide a foundation for effective service management using `systemctl`. Exploring the numerous other options and features offered by this command will further improve your Linux administration skills. Remember to consult the `man systemctl` page for a detailed guide.

