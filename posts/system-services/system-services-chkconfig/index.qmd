---
title: "chkconfig"
date: "05/10/2024"
categories: [ "System Services" ]
---
## Understanding System Services

Before diving into `chkconfig`, it's important to understand what system services are.  These are background processes that start automatically when the system boots and provide essential functionalities like networking, logging, and more.  `chkconfig` allows you to control whether these services start at boot time and their runlevels.


## Runlevels: The Core Concept

Runlevels define the system's operational state.  Traditional SysVinit systems have many runlevels (typically 0-6), each representing a different operational mode (e.g., 0 for halt, 1 for single-user mode, 3 for multi-user mode with networking, 5 for graphical multi-user mode, 6 for reboot). `chkconfig` allows you to specify which runlevels a service should be active in.


## Key `chkconfig` Commands

Here's a breakdown of the most commonly used `chkconfig` commands with illustrative examples:


**1. Listing Services:**

To view the current status of all services and their enabled/disabled state across various runlevels:

```bash
sudo chkconfig --list
```

This command will display a table showing each service and whether it's set to start (on) or not (off) in each runlevel.


**2. Enabling a Service:**

To enable a service (e.g., `httpd` – Apache web server) to start at boot time for runlevels 3, 4, and 5:

```bash
sudo chkconfig httpd on
```


**3. Disabling a Service:**

To prevent a service (e.g., `nfs` – Network File System) from starting at boot time for all runlevels:

```bash
sudo chkconfig nfs off
```


**4. Setting Service Status for Specific Runlevels:**

For more granular control, you can specify the runlevel(s) where the service should be enabled or disabled.  For example, to enable `sshd` (SSH daemon) only in runlevel 3:

```bash
sudo chkconfig sshd on 3
```


**5. Checking a Service's Status in a Specific Runlevel:**

To check the status of `crond` (cron daemon) in runlevel 5:

```bash
sudo chkconfig --list crond | grep 5
```


**6. Deleting a Service from chkconfig:**

While not directly deleting the service itself, you can remove its entry from `chkconfig`'s management if it's no longer needed:

```bash
sudo chkconfig --del <service_name> 
```
(Replace `<service_name>` with the actual service name).


## Important Considerations

* **Root Privileges:**  All `chkconfig` commands require root privileges (using `sudo`).
* **Systemd's Replacement:** On most modern Linux distributions, `systemd` has replaced SysVinit.  `systemctl` is the command-line tool used to manage services under systemd.  `chkconfig` might not be available or fully functional on these systems.
* **Service Scripts:** `chkconfig` relies on properly configured service scripts located in `/etc/init.d/`.


This detailed exploration of `chkconfig` provides a solid foundation for managing system services on older Linux systems. Remember to tailor these examples to your specific services and needs. Always exercise caution when modifying system services.

