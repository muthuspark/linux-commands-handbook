---
title: "dump"
date: "02/01/2024"
categories: [ "Backup and Recovery" ]
---
## Understanding `dump`'s Functionality

`dump` creates tape archive files, traditionally used for backing up to magnetic tapes.  However, these archive files can be stored on any device, including hard drives or network shares. Its strength lies in its ability to perform incremental backups, reducing backup time and storage space compared to full backups each time.  `dump` uses a complex algorithm to only back up data that has changed since the last backup.

Key Features of `dump`:

* **Full Backups:** Creates a complete copy of a file system.
* **Incremental Backups:** Backs up only the files that have changed since the last backup.
* **Level 0-9 Backups:**  `dump` supports different levels of incremental backups (0 being a full backup, 1 being incremental based on 0, 2 based on 1, and so on).
* **Tape Handling:** While primarily designed for tapes, it works seamlessly with files.
* **Compression:**  Supports compression to reduce storage space.


## Essential `dump` Command Syntax

The basic syntax of the `dump` command is:

```bash
dump [-0|-1|-2|-i level] [-f device] [-L] [-v] [-u username] filesystem
```

* **`-0`:** Specifies a level 0 (full) backup.
* **`-1`, `-2`, etc.:** Specifies incremental backup levels (1, 2, and so on).  Each level requires a previous level's backup to be restored correctly.
* **`-f device`:** Specifies the device or file to write the backup to.  Replace `device` with the path to a file (e.g., `/backup/mybackup.dump`).
* **`-L`:** Lists the files to be backed up, without actually backing them up. This is extremely useful for testing purposes.
* **`-v`:** Enables verbose output, showing progress and details during the backup process.
* **`-u username`:** Specifies the user to own the backed-up files.
* **`filesystem`:** The filesystem to back up (e.g., `/home`, `/`).


## Practical Examples

**1. Creating a Full Backup:**

This example creates a full backup of the `/home` directory to a file named `/backup/home.dump`:

```bash
sudo dump -0vf /backup/home.dump /home
```

**2. Creating an Incremental Backup (Level 1):**

Assuming you already have a level 0 backup (`/backup/home.dump`), this command creates a level 1 incremental backup:

```bash
sudo dump -1vf /backup/home.dump.1 /home
```

**3. Listing Files without Backing Up:**

To see what files `dump` would back up without actually performing the backup:

```bash
sudo dump -0Lf /dev/null /home
```
(We use `/dev/null` as a dummy device because we don't want to write the backup to a file.)

**4. Restoring a Backup** (using `restore`)

The `restore` command is used to restore backups created by `dump`.  The syntax is similar, but you specify the backup file using `-f` and potentially specify a volume number if you need to restore incremental backups:

```bash
sudo restore -f /backup/home.dump /home
sudo restore -f /backup/home.dump.1 /home
```


##  Important Considerations


* **Permissions:** Ensure you have appropriate permissions to access the filesystem being backed up and the target location for the backup.  Use `sudo` as needed.
* **Space Requirements:**  Full backups will require significant storage space.  Incremental backups are more space-efficient.
* **Error Handling:** Monitor the output for errors.  `dump` provides detailed messages indicating problems.
* **Tape Drive Considerations:** If using a tape drive, ensure the tape is properly mounted and the drive is configured correctly.


This guide provides a foundational understanding of the `dump` command. Further exploration of its options and features will improve your Linux backup and recovery capabilities. Remember to always test your backup and recovery procedures regularly to ensure they function as expected.

