---
title: "mpstat"
date: "07/09/2024"
categories: [ "Performance Monitoring" ]
---
## Understanding `mpstat`'s Output

`mpstat`'s output can seem daunting at first, but with a little explanation, it becomes readily understandable. By default, `mpstat` displays average CPU utilization statistics since the system booted.  However, its real power lies in its ability to provide real-time updates and historical data.

The key metrics you'll see include:

* **%user:**  Percentage of CPU time spent running user-level processes. High values might indicate a workload-intensive application or a process hogging resources.
* **%nice:** Percentage of CPU time spent running user-level processes with niced priority (lower priority).
* **%system:** Percentage of CPU time spent running kernel-level processes.  High values could suggest kernel issues or driver problems.
* **%iowait:** Percentage of CPU time spent waiting for I/O operations. This is a strong indicator of disk bottlenecks.
* **%irq:** Percentage of CPU time spent servicing hardware interrupts.
* **%softirq:** Percentage of CPU time spent servicing software interrupts.
* **%steal:** Percentage of CPU time stolen by another virtual machine in a virtualized environment.  Relevant only in virtualized setups.
* **%idle:** Percentage of CPU time spent idle.


## Basic Usage: Getting a Snapshot of CPU Activity

The simplest way to use `mpstat` is to run it without any arguments:

```bash
mpstat
```

This will show the average CPU statistics since boot.  To get a more detailed view, including per-core statistics, use the `-P` option:

```bash
mpstat -P ALL
```

`-P ALL` displays statistics for all CPUs and cores. You can specify a particular CPU core using a number, for example:

```bash
mpstat -P 0  # Statistics for CPU 0
```


## Monitoring CPU Performance Over Time

For continuous monitoring, specify the interval and number of samples:

```bash
mpstat 2 5  # Display statistics every 2 seconds for 5 samples
```

This command will show CPU utilization every two seconds for five iterations. This is useful for observing CPU behavior during resource-intensive tasks.


## Focusing on Specific Metrics

While the default output is detailed, you might only need certain metrics.  Using the `-u` option displays only user and system statistics:

```bash
mpstat -u 2 5
```

Similarly, the `-I` option can be used to show interrupt statistics (IRQ and softirq):

```bash
mpstat -I SUM 2 5 # SUM gives aggregated interrupt stats
```


## Analyzing the Results

By analyzing the output of `mpstat`, you can identify performance bottlenecks.  For instance:

* Consistently high `%iowait` suggests disk I/O is a limiting factor.
* High `%user` combined with low `%idle` could indicate a CPU-bound process.
* Elevated `%system` might hint at kernel-level problems or inefficient drivers.

Understanding these relationships is key to using `mpstat` effectively for performance tuning and troubleshooting.


## Advanced Usage:  Averaging over Intervals

`mpstat` also offers the ability to average statistics over specific time intervals using the `-A` option:


```bash
mpstat -A 10 1 # Averages over 10 seconds for one sample
```

This provides a smoother view of CPU utilization compared to snapshots taken at short intervals.


Using these examples and understanding the core metrics, you can effectively use `mpstat` to gain a better understanding of your Linux system's performance and optimize its resource usage. This detailed understanding will allow you to proactively address performance issues before they impact your system's stability and responsiveness.

