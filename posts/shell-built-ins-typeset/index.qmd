---
title: "typeset"
date: "02/29/2024"
categories: [ "Shell Built-ins" ]
---
## Understanding `typeset`

`typeset` is a powerful command that allows you to define and modify the attributes of shell variables.  It enables you to specify the data type, scope, and other properties of your variables, leading to more robust and predictable scripts. While its functionality is largely similar across different shells (like Bash, Zsh, and Ksh), there might be subtle differences in syntax and available options. This tutorial primarily focuses on Bash's implementation.

## Key Features and Options

The core functionality of `typeset` revolves around these key aspects:

* **Data Type:** You can declare variables as integers (`-i`), floating-point numbers (`-f`), arrays (`-a`), or strings (default).  This helps enforce type checking and prevents unexpected behavior.
* **Scope:** You can control the visibility of a variable, making it local to a function (`-l`) or global across the entire shell session.
* **Attributes:**  Additional attributes can be set, such as read-only (`-r`), exported to child processes (`-x`), or setting a default value.

## Code Examples: Unveiling `typeset`'s Power

Let's explore `typeset` with practical examples:

**1. Declaring Integer Variables:**

```bash
typeset -i count=0
count=$((count + 1))
echo "Count: $count"  # Output: Count: 1
```

This example declares `count` as an integer.  Attempting to assign a non-integer value will result in an error.

**2. Declaring an Array:**

```bash
typeset -a myArray
myArray[0]="apple"
myArray[1]="banana"
myArray[2]="cherry"
echo "${myArray[@]}" # Output: apple banana cherry
```

Here, `myArray` is declared as an array, allowing you to store multiple values.

**3. Setting a Read-Only Variable:**

```bash
typeset -r pi=3.14159
pi=3.14 # This will result in an error because pi is read-only.
echo $pi   #Output: 3.14159
```

This demonstrates how `-r` prevents modification of a variable after its initial assignment.

**4. Exporting a Variable to Child Processes:**

```bash
typeset -x myPath="/home/user/documents"
./myScript.sh # myPath will be accessible within myScript.sh
```

The `-x` option makes the variable `myPath` available to any processes spawned from the current shell.


**5. Setting a Default Value:**

While not directly supported by a dedicated option, you can achieve this through assignment during declaration:

```bash
typeset myVar="Default Value"
echo "$myVar" # Output: Default Value
```

If `myVar` isn't subsequently assigned a new value, it retains its default.


**6. Using `declare` (Bash Synonym):**

`declare` is a synonym for `typeset` in Bash and offers identical functionality:

```bash
declare -i num=10
declare -a myList=("a" "b" "c")
```


These examples showcase the diverse capabilities of `typeset`. By leveraging its options, you can write cleaner, more efficient, and less error-prone shell scripts.  Understanding `typeset` significantly enhances your command of the Linux shell environment.

