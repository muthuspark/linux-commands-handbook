---
title: "free"
date: "09/24/2024"
categories: [ "System Information" ]
---
## Understanding the Basics

The simplest form of the command, `free`, provides a snapshot of your system's memory usage.  Let's break down a typical output:

```
              total        used        free      shared  buff/cache   available
Mem:          1996        162        1677          11         157        1786
Swap:         2047          0        2047
```

* **Mem:** Represents physical memory (RAM).
    * **total:** Total amount of RAM installed.
    * **used:** Memory currently in use by processes and the kernel.
    * **free:** Memory not currently used by any process.
    * **shared:** Memory shared between processes (often used by libraries).
    * **buff/cache:** Memory used for buffering and caching.  This memory is not necessarily "free" in the sense that applications can directly use it, but it's readily available.
    * **available:** This is arguably the most important metric. It represents the amount of memory readily available to new processes. It accounts for "free" memory and memory used for buffers/cache that can be easily reclaimed.

* **Swap:** Represents swap space (a portion of your hard drive used as an extension of RAM).
    * **total:** Total amount of swap space.
    * **used:** Amount of swap space currently in use.
    * **free:** Amount of swap space available.


##  Adding Detail with Options

The `free` command offers many useful options to customize the output:

* **`-h` (or `--human-readable`):** Displays the output in a more human-friendly format, using units like KB, MB, and GB.  This is highly recommended for easier interpretation.

```bash
free -h
```

* **`-m` (or `--mega`):** Displays the output in megabytes.

```bash
free -m
```

* **`-g` (or `--giga`):** Displays the output in gigabytes.

```bash
free -g
```

* **`-b` (or `--bytes`):** Displays the output in bytes.

* **`-s <interval>` (or `--interval <interval>`):** Displays the memory usage information repeatedly at the specified interval (in seconds). This is very useful for real-time monitoring.

```bash
free -h -s 2  # Display memory usage every 2 seconds.
```

* **`-t` (or `--total`):** Displays the total memory usage (sum of Mem and Swap).

```bash
free -h -t
```

* **`-o` (or `--only-mem`):** Shows only the memory information without the Swap information.


```bash
free -h -o
```

* **`-w` (or `--width <width>`):** Use this to set the output width

```bash
free -h -w 60
```


##  Interpreting the Output for Troubleshooting

High `used` memory and low `available` memory could indicate a memory leak, a process consuming excessive resources, or insufficient RAM. High `Swap` usage could point to insufficient RAM, requiring you to either upgrade your RAM or optimize your processes to consume less memory.  The `free` command provides the foundational data to investigate these scenarios further.  By combining `free` with other commands like `top` (for monitoring processes) and `ps` (for listing processes), you can effectively diagnose and resolve memory-related issues.


##  Beyond the Basics:  Working with Output

The output of `free` can be further processed using other commands like `awk` to extract specific values or create custom reports.  For example, to get just the available memory in megabytes:

```bash
free -m | awk '/Mem:/ {print $7}'
```

This example uses `awk` to filter the output for the line containing "Mem:" and then print the 7th column (available memory in MB).  Similar techniques can be used to extract and manipulate any other data field from the `free` command's output.

