---
title: "popd"
date: "11/28/2024"
categories: [ "Shell Built-ins" ]
---
## Understanding `popd`

`popd` (pop directory) is a shell built-in command that removes the top directory from the directory stack and changes the current working directory to that directory.  Essentially, it reverses the action of `pushd`. If you've used `pushd` to save a directory location, `popd` retrieves it and makes it your current directory.  This avoids the need to manually type out lengthy or complex path names, significantly speeding up your workflow.


## Using `popd` in Action

Let's explore `popd` through several code examples.  Assume we start in our home directory (`/home/user`).


**Example 1: Basic `popd` Usage**

First, we'll use `pushd` to save a directory:

```bash
pushd /tmp
```

This saves `/tmp` onto the directory stack. Now, let's navigate to another directory:

```bash
cd /var/log
```

Now, using `popd` will bring us back to `/tmp`:

```bash
popd
```

Your current working directory should now be `/tmp`.


**Example 2:  `popd` with Multiple `pushd` commands**

`pushd` maintains a stack of directories.  Let's see how `popd` handles multiple entries:

```bash
pushd /tmp
pushd /etc
pushd /usr/local
pwd  # Output: /usr/local
popd  # Returns to /etc
pwd  # Output: /etc
popd  # Returns to /tmp
pwd  # Output: /tmp
popd  # Returns to /home/user (or your home directory)
pwd  # Output: /home/user
```

As you can see, `popd` systematically pops directories off the stack in a Last-In, First-Out (LIFO) manner.


**Example 3:  `popd` and its `-n` option**

The `-n` option prevents `popd` from changing the current directory.  It only removes the top directory from the stack.  This is useful when you want to manage the stack without altering your current location.

```bash
pushd /tmp
pushd /etc
popd -n
pwd  # Output: /etc (current directory remains unchanged)
dirs # Output: /tmp /home/user (shows the remaining directory stack)
```


**Example 4:  Error Handling**

If the directory stack is empty, `popd` will generally report an error.  The exact message will vary depending on your shell, but it will indicate that there are no directories to pop.

```bash
popd  # (Executed after all directories have been popped)

```


**Example 5: Combining `pushd`, `popd`, and `dirs`**

The `dirs` command is invaluable for inspecting the directory stack.  Let's use it alongside `pushd` and `popd`:

```bash
pushd /tmp
pushd /var/log
dirs # Output: /var/log /tmp /home/user
popd
dirs # Output: /tmp /home/user
popd
dirs # Output: /home/user
```

`dirs` shows you the current directory stack, providing context for your `pushd` and `popd` operations.



Using these examples as a foundation, you can incorporate `popd` effectively into your shell scripting and daily Linux workflow to efficiently manage your directory navigation.  Experiment with these examples, modifying paths and using the `-n` option to gain a comprehensive understanding of this powerful command.

