---
title: "badblocks"
date: "08/05/2024"
categories: [ "Storage and Filesystems" ]
---
## Understanding `badblocks`

The `badblocks` command is a non-destructive utility; it identifies bad blocks without altering the filesystem or erasing data.  It works by writing and reading test patterns to the storage device, identifying sectors that fail to pass these tests.  The results are typically reported as a list of block addresses.  This information can then be used to inform decisions about filesystem maintenance or device replacement.

`badblocks` offers different testing methods, each with its strengths and weaknesses. The most common options are:

* **`-n` (Non-destructive):** This is the safest option.  It only reads data from the device, making it suitable for regular checks without risking data loss. However, it might miss some bad blocks that only manifest themselves under write operations.

* **`-w` (Destructive):** This option performs write tests, which can identify more bad blocks than `-n`. However, it's important to back up any important data before using this option, as it will overwrite the device's contents. This is often used on freshly formatted devices or during the process of preparing a storage device for usage.

* **`-s` (Super-destructive):** This approach is much more intensive, increasing the detection of bad blocks. As it is more destructive, use with extreme caution, and only when absolutely necessary after securing backups.

## Practical Examples

Let's look at some examples illustrating `badblocks` usage.  Remember to replace `/dev/sdX` with the actual device path. **Be extremely cautious when working with `/dev` devices.  Incorrect usage can lead to data loss.** Always double-check your device path before executing any commands.

**1. Non-destructive testing:**

This example performs a non-destructive check of a USB drive mounted at `/dev/sdb`:

```bash
sudo badblocks -v -n /dev/sdb
```

The `-v` flag provides verbose output, showing the progress and results of the test.  The output will list any bad blocks found.


**2. Destructive testing on a newly formatted drive:**

Before using this option, ensure the drive is *empty* and you have no critical data on it.  This example tests a newly formatted drive `/dev/sdc`:


```bash
sudo badblocks -v -w /dev/sdc
```

This will write test patterns to the drive and report any bad blocks encountered. Again, use with caution.


**3.  Redirecting Output to a File:**

It's often useful to save the output of `badblocks` to a file for later analysis or reporting:

```bash
sudo badblocks -v -n /dev/sdb > badblocks_report.txt
```

This command redirects the output to a file named `badblocks_report.txt`.


**4. Specifying a range of blocks:**

You can test a specific range of blocks on the device using the `-o` (offset) and `-b` (block size) options.   This is useful for testing a suspected area or for more focused analysis:

```bash
sudo badblocks -v -n -o 1024 -b 512 /dev/sdb
```

This tests 512 bytes starting from block 1024.


**5. Using a different test pattern:**

The default test pattern is suitable for most situations, but you can specify a different one using the `-t` option. However, the impact on detecting bad blocks might vary depending on the device and pattern.


**Important Note:** The `badblocks` output typically lists block numbers.  These numbers might need further interpretation depending on your filesystem and partitioning scheme.  You'll likely need to consult your filesystem documentation or use other tools to translate these numbers into meaningful locations on the device.  While `badblocks` itself identifies bad blocks, fixing them usually requires intervention at the filesystem level or even device replacement.

