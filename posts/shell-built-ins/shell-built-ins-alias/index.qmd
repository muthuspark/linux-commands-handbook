---
title: "alias"
date: "11/13/2024"
categories: [ "Shell Built-ins" ]
---
## What is `alias`?

`alias` is a shell built-in command that lets you define abbreviations or nicknames for commands or command sequences.  Once an alias is set, you can use the shorter alias instead of the full command, making your workflow faster and less error-prone.  This is especially useful for frequently used commands with long names or complex options.


## Creating Aliases

The basic syntax for creating an alias is straightforward:

```bash
alias alias_name='command'
```

Replace `alias_name` with the name you want to give your alias, and `command` with the actual command you want to shorten.  For example, to create an alias for the `ls -l` command (which lists files in long format), you would use:

```bash
alias ll='ls -l'
```

Now, typing `ll` at the command prompt will execute `ls -l`.


## Aliases with Multiple Commands

You can also create aliases for sequences of commands using semicolons to separate them. For instance, to create an alias that first cleans the screen and then lists files in long format:

```bash
alias cll='clear; ls -l'
```

This alias, `cll`, will first clear the screen (`clear`) and then execute `ls -l`.


## Using Variables in Aliases

Aliases can also incorporate shell variables.  Let's say you frequently need to navigate to a specific directory:

```bash
MY_DIR="/home/user/documents"
alias cd_docs='cd $MY_DIR'
```

Now, `cd_docs` will take you directly to `/home/user/documents`.  Remember to use `$` before the variable name to access its value.


## Viewing Existing Aliases

To see a list of all your currently defined aliases, simply type:

```bash
alias
```

This will display all aliases along with their corresponding commands.


## Removing Aliases

To remove an alias, use the `unalias` command followed by the alias name:

```bash
unalias ll
```

This will remove the `ll` alias.


## Aliases and Function Differences

While aliases are convenient for simple command shortcuts, they have limitations. For more complex tasks involving parameters or conditional logic, shell functions are more suitable.  Functions offer greater flexibility and control.  Let's compare them with an example where a function would be preferred:


**Alias (Limited):**

```bash
alias backup_file='cp $1 /backup'  #This will ONLY work if a file is supplied
```

**Function (More Flexible):**

```bash
backup_file() {
  if [ -z "$1" ]; then
    echo "Usage: backup_file <filename>"
  else
    cp "$1" /backup
  fi
}
```

The function above handles missing filenames gracefully, something an alias cannot achieve easily.


## Advanced Alias Examples

Let's look at more advanced uses. This alias uses command substitution to get the current date and create a directory with that date:

```bash
alias create_dated_dir='mkdir -p "$(date +%Y-%m-%d)"'
```

This alias will create a new directory named with the current date in YYYY-MM-DD format.




##  Temporary Aliases

You can set a temporary alias that only lasts for the current shell session.  This is useful for testing or one-time use aliases without permanently changing your shell configuration:

```bash
alias my_temp_alias='echo "This is a temporary alias"'
```


This temporary alias will be lost upon closing the current terminal.




