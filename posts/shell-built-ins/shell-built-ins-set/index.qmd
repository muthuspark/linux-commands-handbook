---
title: "set"
date: "03/14/2024"
categories: [ "Shell Built-ins" ]
---
## Understanding `set`'s Core Functionality

At its heart, `set` modifies the shell's environment.  This includes setting shell variables, enabling or disabling shell options, and positional parameters (arguments passed to a script).  The basic syntax is straightforward:

```bash
set [option] [parameter]...
```

Let's look at the key aspects:


### Setting Shell Variables

The most common use of `set` is assigning values to shell variables.  Unlike `export`, which makes variables accessible to child processes, `set` typically limits the scope to the current shell instance.

```bash
set my_variable="Hello, world!"
echo $my_variable  # Output: Hello, world!
```

You can also set multiple variables simultaneously:

```bash
set name="John Doe" age=30 city="New York"
echo "Name: $name, Age: $age, City: $city"
```


###  Manipulating Positional Parameters

Positional parameters (`$1`, `$2`, etc.) represent the arguments passed to a script or function.  `set` allows you to directly manipulate these:

```bash
#!/bin/bash

set -- "apple" "banana" "cherry"  # Reassign positional parameters

echo "First argument: $1"  # Output: apple
echo "Second argument: $2" # Output: banana
echo "All arguments: $*"    # Output: apple banana cherry
```

This example overrides the original positional parameters, replacing them with "apple", "banana", and "cherry".


###  Enabling and Disabling Shell Options

`set` also controls shell options, which modify the shell's behavior.  For example, `-e` exits the script immediately upon encountering an error:

```bash
#!/bin/bash

set -e

false  # This will cause the script to exit

echo "This line won't be executed"
```

Other useful options include:

* `-x`: Enables tracing – displays each command before execution.
* `-v`: Enables verbose mode – displays each line of the script as it's read.
* `-u`: Treats unset variables as errors.


Example using `-x` and `-v`:

```bash
#!/bin/bash
set -xv

my_var="hello"
echo "$my_var"
```

Running this script will show you each command before its execution and the script's lines as they are being read.


###  Unsetting Variables

While `unset` is the dedicated command, `set` can indirectly unset variables by reassigning them to null:

```bash
set my_variable=""
echo "$my_variable"  # Output: (empty string)
```

Note: This doesn't entirely remove the variable; it simply sets its value to an empty string.


##  Advanced `set` Usage:  Array Handling

While `set` isn't the primary tool for array manipulation in Bash (associative arrays are preferred),  it can be used to simulate arrays:

```bash
set -- one two three four
echo "$1" # one
echo "$2" # two
echo "$@" # one two three four
```


This shows how positional parameters can act as a rudimentary array. However, for array handling, consider using Bash arrays with the `declare -a` command.


##  `set` with Special Parameters

`set` interacts with special shell parameters such as `$#` (number of arguments), `$?` (exit status of the last command), and others. While you won't directly assign values to these with `set`, their behavior is affected by `set`'s manipulation of positional parameters.





